{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 AndaleMono;
\f3\fnil\fcharset0 HelveticaNeue-Italic;}
{\colortbl;\red255\green255\blue255;\red18\green23\blue25;\red255\green255\blue255;\red26\green26\blue26;
\red115\green0\blue2;\red246\green246\blue246;\red0\green0\blue0;\red0\green0\blue117;\red83\green85\blue2;
}
{\*\expandedcolortbl;;\cssrgb\c8627\c11765\c12941;\cssrgb\c100000\c100000\c100000;\cssrgb\c13333\c13333\c13333;
\cssrgb\c53333\c0\c0;\cssrgb\c97255\c97255\c97255;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c53333;\cssrgb\c40000\c40000\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl672\partightenfactor0

\f0\b\fs56 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Competitive Coding Recommendations\

\f1\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\partightenfactor0
\ls1\ilvl0
\fs28 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 #include <bits/stdc++.h>
\f1 \cf4 \cb3 \strokec4 \'a0instead of many includes.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 using namespace std;
\f1 \cf4 \cb3 \strokec4 \'a0instead of typing\'a0
\f2 \cf5 \cb6 \strokec5 std::
\f1 \cf4 \cb3 \strokec4 \'a0every time.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 using
\f1 \cf4 \cb3 \strokec4 \'a0instead of\'a0
\f2 \cf5 \cb6 \strokec5 typedef
\f1 \cf4 \cb3 \strokec4 , for example\'a0
\f2 \cf5 \cb6 \strokec5 using ll = long long;
\f1 \cf4 \cb3 \strokec4 .\'a0
\f3\i Rationale: It's more consistent with the style of modern C++.
\f1\i0 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 struct
\f1 \cf4 \cb3 \strokec4 \'a0instead of\'a0
\f2 \cf5 \cb6 \strokec5 class
\f1 \cf4 \cb3 \strokec4 .\'a0
\f3\i Rationale: It defaults to public, and you don't need encapsulation in competitive programming!
\f1\i0 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Don't use too many macros but don't be afraid of using macros!\'a0
\f3\i Rationale: It's not easy to debug and read a code full of ugly macros. but we're hackers after all!
\f1\i0 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 const
\f1 \cf4 \cb3 \strokec4 \'a0for defining a constant instead of\'a0
\f2 \cf5 \cb6 \strokec5 #define
\f1 \cf4 \cb3 \strokec4 .\'a0
\f3\i Rationale: consts have a type, and they are evaluated at compile time.
\f1\i0 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 To avoid bugs, you can use curly braces for each case of\'a0
\f2 \cf5 \cb6 \strokec5 switch
\f1 \cf4 \cb3 \strokec4 \'a0statement.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 auto
\f1 \cf4 \cb3 \strokec4 \'a0to increase readability and decrease code size.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use braced initializer lists.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 emplace
\f1 \cf4 \cb3 \strokec4 \'a0and\'a0
\f2 \cf5 \cb6 \strokec5 emplace_back
\f1 \cf4 \cb3 \strokec4 \'a0for containers when dealing with pairs and tuples.\'a0
\f3\i Rationale:\'a0
\f2\i0 \cf5 \cb6 \strokec5 (elem1, elem2, ...)
\f3\i \cf4 \cb3 \strokec4 \'a0instead of\'a0
\f2\i0 \cf5 \cb6 \strokec5 (\{elem1, elem2, ...\})
\f3\i \cf4 \cb3 \strokec4 .
\f1\i0 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use lambda functions! They're especially useful when passing functions as arguments like in\'a0
\f2 \cf5 \cb6 \strokec5 sort
\f1 \cf4 \cb3 \strokec4 .\'a0
\f0\b Don't repeat yourself
\f1\b0 , use lambda functions in your code instead of copy/pasting.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 nullptr
\f1 \cf4 \cb3 \strokec4 \'a0instead of\'a0
\f2 \cf5 \cb6 \strokec5 NULL
\f1 \cf4 \cb3 \strokec4 \'a0or\'a0
\f2 \cf5 \cb6 \strokec5 0
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Boolean values are\'a0
\f2 \cf5 \cb6 \strokec5 true
\f1 \cf4 \cb3 \strokec4 \'a0and\'a0
\f2 \cf5 \cb6 \strokec5 false
\f1 \cf4 \cb3 \strokec4 !\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use\'a0
\f2 \cf5 \cb6 \strokec5 ios::sync_with_stdio(false);
\f1 \cf4 \cb3 \strokec4 \'a0and\'a0
\f2 \cf5 \cb6 \strokec5 cin.tie(nullptr);
\f1 \cf4 \cb3 \strokec4 \'a0for a faster I/O using\'a0
\f2 \cf5 \cb6 \strokec5 cin/cout
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use builtin functions starting with\'a0
\f2 \cf5 \cb6 \strokec5 __builtin
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 GCD and LCM are available in C++17 under\'a0
\f2 \cf5 \cb6 \strokec5 gcd
\f1 \cf4 \cb3 \strokec4 \'a0and\'a0
\f2 \cf5 \cb6 \strokec5 lcm
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use C++11 for-each style for loops\'a0
\f2 \cf5 \cb6 \strokec5 for (auto& elem : vec)
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use C++17 binding style like\'a0
\f2 \cf5 \cb6 \strokec5 for (auto& [key, val] : dic)
\f1 \cf4 \cb3 \strokec4 \'a0and\'a0
\f2 \cf5 \cb6 \strokec5 auto [x, y] = myPoint;
\f1 \cf4 \cb1 \strokec4 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use C++17 template argument deduction\'a0
\f2 \cf5 \cb6 \strokec5 pair p\{1, 2.5\};
\f1 \cf4 \cb3 \strokec4 \'a0instead of\'a0
\f2 \cf5 \cb6 \strokec5 pair<int, double> p\{1, 2.5\};
\f1 \cf4 \cb3 \strokec4 .\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 If you have a lot of nested loops and conditions, refactor! You probably should be using functions.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Never use\'a0
\f2 \cf5 \cb6 \strokec5 goto
\f1 \cf4 \cb3 \strokec4 ! But be brave enough to use\'a0
\f2 \cf5 \cb6 \strokec5 goto
\f1 \cf4 \cb3 \strokec4 \'a0when you want to break from several nested loops (in case you just can't refactor it)!\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Some websites like codeforces use the flag\'a0
\f2 \cf5 \cb6 \strokec5 -DONLINE_JUDGE
\f1 \cf4 \cb3 \strokec4 \'a0to compile your code, this means that you can remove your\'a0
\f2 \cf5 \cb6 \strokec5 cerr
\f1 \cf4 \cb3 \strokec4 s or your debug functions automatically or redirect input/output to file instead of stdin/stdout, etc.\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f2\fs26\fsmilli13300 \cf5 \cb3 \strokec5 #ifdef\cf7 \strokec7  ONLINE_JUDGE\
\cf5 \strokec5 #define\cf7 \strokec7  cerr \cf8 \strokec8 if\cf7 \strokec7  \cf9 \strokec9 (\cf8 \strokec8 false\cf9 \strokec9 )\cf7 \strokec7  cerr\
\cf5 \strokec5 #endif\cf7 \strokec7  \
\cf5 \strokec5 // Alternatively this can be done using a local -DLOCAL flag\cf7 \strokec7 \
\cf5 \strokec5 // when compiling on your machine, and using #ifndef LOCAL instead.
\fs28 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\partightenfactor0
\ls2\ilvl0
\f1 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Prefer using normal operators like\'a0
\f2 \cf5 \cb6 \strokec5 !, &&, ||, ^, ...
\f1 \cf4 \cb3 \strokec4 \'a0instead of their alternative representations\'a0
\f2 \cf5 \cb6 \strokec5 not, and, or, xor, ...
\f1 \cf4 \cb3 \strokec4 .\'a0
\f3\i Rationale: We're not coding in python!
\f1\i0 \cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Break down your code into different smaller functions. Your code will be cleaner and easier to debug.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\partightenfactor0
\ls2\ilvl0
\f0\b \cf4 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Don't try to be too clever!
\f1\b0 \cb1 \
\ls2\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Don't reinvent the wheel!
\f1\b0 \'a0\'97\'a0
\f3\i Make use of standard library!
\f1\i0 \cb1 \
\ls2\ilvl0
\f0\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Use common sense and be consistent!
\f1\b0 \cb1 \
}